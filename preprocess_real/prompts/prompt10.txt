
Your task is to select EXACTLY the context parts needed to implement the test scenarios for the provided code.

**Rules:**
1. Analyze the code under test and test scenarios carefully
2. Select context parts that contain:
   - Data structures, required for implementing test scenarios
   - Functions / methods of classes, required for implementing test scenarios
   - Any other information, required for implementing test scenarios
3. Exclude:
   - Unrelated components (even if similar)
   - Low-level implementation details
   - Duplicate information
4. Return ONLY Python list of selected part numbers, like [1, 3, 4]

**Code to test:**
package org.springframework.samples.petclinic.customers.web;
@RestController
@Timed("petclinic.pet")
@Slf4j
class PetResource {
    private final PetRepository petRepository;
    private final OwnerRepository ownerRepository;
    @GetMapping("/petTypes")
    public List<PetType> getPetTypes() {
        return petRepository.findPetTypes();
    }
    @PostMapping("/owners/{ownerId}/pets")
    @ResponseStatus(HttpStatus.CREATED)
    public Pet processCreationForm(
        @RequestBody PetRequest petRequest,
        @PathVariable("ownerId") @Min(1) int ownerId) {

        Owner owner = ownerRepository.findById(ownerId)
            .orElseThrow(() -> new ResourceNotFoundException("Owner " + ownerId + " not found"));

        final Pet pet = new Pet();
        owner.addPet(pet);
        return save(pet, petRequest);
    }
    @PutMapping("/owners/*/pets/{petId}")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    public void processUpdateForm(@RequestBody PetRequest petRequest) {
        int petId = petRequest.id();
        Pet pet = findPetById(petId);
        save(pet, petRequest);
    }
    private Pet save(final Pet pet, final PetRequest petRequest) {

        pet.setName(petRequest.name());
        pet.setBirthDate(petRequest.birthDate());

        petRepository.findPetTypeById(petRequest.typeId())
            .ifPresent(pet::setType);

        log.info("Saving pet {}", pet);
        return petRepository.save(pet);
    }
    @GetMapping("owners/*/pets/{petId}")
    public PetDetails findPet(@PathVariable("petId") int petId) {
        Pet pet = findPetById(petId);
        return new PetDetails(pet);
    }
    private Pet findPetById(int petId) {
        return petRepository.findById(petId)
            .orElseThrow(() -> new ResourceNotFoundException("Pet " + petId + " not found"));
    }
public PetResource(org.springframework.samples.petclinic.customers.model.PetRepository petRepository,org.springframework.samples.petclinic.customers.model.OwnerRepository ownerRepository)
}

**Test scenarios (4 total):**
0) 1: Verify that retrieving pet types returns an ordered list of available pet types
Steps: Given the system has multiple pet types stored in a repository with distinct names
When a client requests the list of pet types
Then the response should include all pet types sorted alphabetically by their names

1) 2: Verify that a valid pet creation request successfully associates a new pet with an existing owner and returns a created status
Steps: Given an existing owner is registered in the system with a valid identifier
And valid pet details are provided including a name, birth date, and a valid pet type identifier
When a client submits a pet creation request to add a new pet for that owner
Then the system should associate the new pet with the existing owner
And the new pet’s information should be saved with the provided details
And the system should respond with a status indicating that the creation was successful

2) 3: Verify that updating an existing pet with valid details successfully modifies the pet’s information without returning content
Steps: Given a pet exists in the system with a valid identifier and current details
And updated pet details are provided including a new name, birth date, and possibly a modified pet type identifier
When a client submits an update request for the pet using the valid pet identifier
Then the system should update the pet’s details with the provided information
And the system should return a response with no content to indicate a successful update

3) 4: Verify that submitting a pet creation request for a non-existent owner results in a resource not found error
Steps: Given no owner exists in the system with the provided identifier
And valid pet details are provided in the pet creation request
When a client submits a pet creation request with the non-existent owner identifier
Then the system should respond with an error indicating that the specified owner was not found
And the error should clearly state the resource is missing



**Context parts (0-21):**

=== Part 0 ===
PetRequest(int id,
                  @JsonFormat(pattern = "yyyy-MM-dd")
                  Date birthDate,
                  @Size(min = 1)
                  String name,
                  int typeId
)
package org.springframework.samples.petclinic.customers.web;
record PetRequest(int id,
                  @JsonFormat(pattern = "yyyy-MM-dd")
                  Date birthDate,
                  @Size(min = 1)
                  String name,
                  int typeId
) {
}

=== Part 1 ===
package org.springframework.samples.petclinic.customers.model;
/**
 * Repository class for <code>Pet</code> domain objects All method names are compliant with Spring Data naming
 * conventions so this interface can easily be extended for Spring Data See here: http://static.springsource.org/spring-data/jpa/docs/current/reference/html/jpa.repositories.html#jpa.query-methods.query-creation

 */
public interface PetRepository extends JpaRepository<Pet, Integer> {
/**
     * Retrieve all {@link PetType}s from the data store.
     * @return a Collection of {@link PetType}s.
     */
        @Query("SELECT ptype FROM PetType ptype ORDER BY ptype.name") List<PetType> findPetTypes()
    @Query("FROM PetType ptype WHERE ptype.id = :typeId") Optional<PetType> findPetTypeById(@Param("typeId") int typeId)
}

=== Part 2 ===
package org.springframework.samples.petclinic.customers.model;
/**
 * Repository class for <code>Owner</code> domain objects All method names are compliant with Spring Data naming
 * conventions so this interface can easily be extended for Spring Data See here: http://static.springsource.org/spring-data/jpa/docs/current/reference/html/jpa.repositories.html#jpa.query-methods.query-creation

 */
public interface OwnerRepository extends JpaRepository<Owner, Integer> {
}

=== Part 3 ===
package org.springframework.samples.petclinic.customers.model;
/**

 * Can be Cat, Dog, Hamster...
 */
@Entity
@Table(name = "types")
public class PetType {
public java.lang.Integer getId()
public java.lang.String getName()
}

=== Part 4 ===
Class `org.springframework.samples.petclinic.customers.model.Pet` declaration:
@Entity
@Table(name = "pets")
public class Pet
The class uses the following imports:
- from package org.springframework.samples.petclinic.customers.model: Owner, PetType
The class has following members:
public methods:
- Integer getId()
- String getName()
- Date getBirthDate()
- PetType getType()
- Owner getOwner()
fields:
- @ManyToOne
    @JoinColumn(name = "owner_id")
    @JsonIgnore
    private Owner owner;
- @Column(name = "name")
    private String name;
- @Column(name = "birth_date")
    @Temporal(TemporalType.DATE)
    private Date birthDate;
- @ManyToOne
    @JoinColumn(name = "type_id")
    private PetType type;
- @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Integer id;


=== Part 5 ===
package org.springframework.samples.petclinic.customers.web;

record PetDetails(

    long id,

    String name,

    String owner,

    @DateTimeFormat(pattern = "yyyy-MM-dd")
    Date birthDate,

    PetType type
) {
    public PetDetails(Pet pet) {
        this(pet.getId(), pet.getName(), pet.getOwner().getFirstName() + " " + pet.getOwner().getLastName(), pet.getBirthDate(), pet.getType());
    }
}

=== Part 6 ===
package org.springframework.samples.petclinic.customers.model;
/**
 * Simple JavaBean domain object representing an owner.

 */
@Entity
@Table(name = "owners")
public class Owner {
    @Getter
    @Setter
    @Column(name = "first_name")
    @NotBlank
    private String firstName;
    @Getter
    @Setter
    @Column(name = "last_name")
    @NotBlank
    private String lastName;
    @OneToMany(cascade = CascadeType.ALL, fetch = FetchType.EAGER, mappedBy = "owner")
    private Set<Pet> pets;
    protected Set<Pet> getPetsInternal() {
        if (this.pets == null) {
            this.pets = new HashSet<>();
        }
        return this.pets;
    }
    public List<Pet> getPets()
    public void addPet(Pet pet) {
        getPetsInternal().add(pet);
        pet.setOwner(this);
    }
public java.lang.Integer getId()
public java.lang.String getFirstName()
public java.lang.String getLastName()
public java.lang.String getAddress()
public java.lang.String getCity()
public java.lang.String getTelephone()
}

=== Part 7 ===
package org.springframework.samples.petclinic.customers.web;
@ResponseStatus(value = HttpStatus.NOT_FOUND)
public class ResourceNotFoundException extends RuntimeException {
    public ResourceNotFoundException(String message) { super(message); }
}

=== Part 8 ===
package jakarta.persistence;
@java.lang.annotation.Documented
@java.lang.annotation.Target({java.lang.annotation.ElementType.TYPE})
@java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)
public @interface Entity {
}

=== Part 9 ===
package jakarta.persistence;
@java.lang.annotation.Target({java.lang.annotation.ElementType.TYPE})
@java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)
public @interface Table {
    java.lang.String name() default ""
}

=== Part 10 ===
package org.springframework.data.jpa.repository;
@java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)
@java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.ANNOTATION_TYPE})
@org.springframework.data.annotation.QueryAnnotation
@java.lang.annotation.Documented
public @interface Query {
    java.lang.String value() default ""
}

=== Part 11 ===
package jakarta.persistence;
@java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.FIELD})
@java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)
public @interface ManyToOne {
}

=== Part 12 ===
package jakarta.persistence;
@java.lang.annotation.Repeatable(jakarta.persistence.JoinColumns.class)
@java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.FIELD})
@java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)
public @interface JoinColumn {
    java.lang.String name() default ""
}

=== Part 13 ===
package jakarta.persistence;
@java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.FIELD})
@java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)
public @interface Column {
    java.lang.String name() default ""
}

=== Part 14 ===
package jakarta.persistence;
@java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.FIELD})
@java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)
public @interface Temporal {
    jakarta.persistence.TemporalType value()
}

=== Part 15 ===
package jakarta.persistence;
public enum TemporalType {
    DATE
}

=== Part 16 ===
package jakarta.persistence;
@java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.FIELD})
@java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)
public @interface Id {
}

=== Part 17 ===
package jakarta.persistence;
@java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.FIELD})
@java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)
public @interface GeneratedValue {
    jakarta.persistence.GenerationType strategy() default jakarta.persistence.GenerationType.AUTO
}

=== Part 18 ===
package jakarta.persistence;
public enum GenerationType {
 IDENTITY
}

=== Part 19 ===
package jakarta.persistence;
@java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.FIELD})
@java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)
public @interface OneToMany {
    jakarta.persistence.CascadeType[] cascade() default {}
    jakarta.persistence.FetchType fetch() default jakarta.persistence.FetchType.LAZY
    java.lang.String mappedBy() default ""
}

=== Part 20 ===
package jakarta.persistence;
public enum CascadeType {
    ALL
}

=== Part 21 ===
package jakarta.persistence;
public enum FetchType {
 EAGER
}


Remember: Your response MUST be ONLY the list, e.g. [1, 3, 5]

Your task is to select EXACTLY the context parts needed to implement the test scenarios for the provided code.

**Rules:**
1. Analyze the code under test and test scenarios carefully
2. Select context parts that contain:
   - Data structures, required for implementing test scenarios
   - Functions / methods of classes, required for implementing test scenarios
   - Any other information, required for implementing test scenarios
3. Exclude:
   - Unrelated components (even if similar)
   - Low-level implementation details
   - Duplicate information
4. Return ONLY Python list of selected part numbers, like [1, 3, 4]

**Code to test:**
package org.springframework.samples.petclinic.visits.web;
@RestController
@Slf4j
@Timed("petclinic.visit")
class VisitResource {
    private final VisitRepository visitRepository;
    @PostMapping("owners/*/pets/{petId}/visits")
    @ResponseStatus(HttpStatus.CREATED)
    public Visit create(
        @Valid @RequestBody Visit visit,
        @PathVariable("petId") @Min(1) int petId) {

        visit.setPetId(petId);
        log.info("Saving visit {}", visit);
        return visitRepository.save(visit);
    }
    @GetMapping("owners/*/pets/{petId}/visits")
    public List<Visit> read(@PathVariable("petId") @Min(1) int petId) {
        return visitRepository.findByPetId(petId);
    }
    @GetMapping("pets/visits")
    public Visits read(@RequestParam("petId") List<Integer> petIds) {
        final List<Visit> byPetIdIn = visitRepository.findByPetIdIn(petIds);
        return new Visits(byPetIdIn);
    }
    static class Visits {
public java.util.List<org.springframework.samples.petclinic.visits.model.Visit> getItems()
    }
public VisitResource(org.springframework.samples.petclinic.visits.model.VisitRepository visitRepository)
}

**Test scenarios (1 total):**
0) 1: Verify that a new pet visit is successfully created and can be retrieved for a valid pet identifier
Steps: Given a pet exists in the system with a valid identifier greater than zero
And the system is prepared to accept visit entries with all required valid information
When a user submits a request to add a new visit with valid details (including an appropriate date and description) for the pet using its valid identifier
Then the system should store the visit, associate it with the provided pet identifier, and return the visit information with a status indicating creation was successful
And when the user requests to view visits for that pet using its valid identifier
Then the system should return a list of visits that includes the newly created visit



**Context parts (0-9):**

=== Part 0 ===
package com.commerce.backend.model.request.cart;
public class AddToCartRequest {
    @NotNull
    @Min(1)
    private Long productVariantId;
    @NotNull
    @Min(1)
    private Integer amount;
public AddToCartRequest()
public void setProductVariantId(java.lang.Long productVariantId)
public void setAmount(java.lang.Integer amount)
}

=== Part 1 ===
package org.springframework.samples.petclinic.visits.model;
/**
 * Repository class for <code>Visit</code> domain objects All method names are compliant with Spring Data naming conventions so this interface can easily be extended for Spring
 * Data See here: http://static.springsource.org/spring-data/jpa/docs/current/reference/html/jpa.repositories.html#jpa.query-methods.query-creation

 */
public interface VisitRepository extends JpaRepository<Visit, Integer> {
    List<Visit> findByPetId(int petId)
    List<Visit> findByPetIdIn(Collection<Integer> petIds)
}

=== Part 2 ===
package io.quarkus.cli;
@CommandLine.Command(name = "list", header = "List enabled Quarkus registries", description = "%n"
        + "This command will list currently enabled Quarkus extension registries.")
public class RegistryListCommand extends BaseRegistryCommand {
}

=== Part 3 ===
package com.commerce.backend.dao;
@Repository
public interface VerificationTokenRepository extends CrudRepository<VerificationToken, Long> {
    Optional<VerificationToken> findByToken(String token)
}

=== Part 4 ===
Class `com.commerce.backend.model.dto.ProductVariantDTO` declaration:
@Builder
public class ProductVariantDTO
The class uses the following imports:
- from package com.commerce.backend.model.dto: ColorDTO
The class has following members:
public methods:
- Long getId()
- Float getPrice()
- String getThumb()
- Integer getStock()
- ColorDTO getColor()


=== Part 5 ===
package jakarta.persistence;
@java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.FIELD})
@java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)
public @interface Column {
    java.lang.String name() default ""
}

=== Part 6 ===
package jakarta.persistence;
@java.lang.annotation.Target({java.lang.annotation.ElementType.TYPE})
@java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)
public @interface Table {
    java.lang.String name() default ""
}

=== Part 7 ===
Class `org.springframework.samples.petclinic.visits.model.Visit` declaration:
@Entity
@Table(name = "visits")
@Builder(builderMethodName = "visit")
public class Visit
The class has following members:
public methods:
- Visit(Integer id,Date date,String description,int petId)
- Visit()
- void setId(Integer id)
- void setDate(Date date)
- void setDescription(String description)
- void setPetId(int petId)
- Integer getId()
- Date getDate()
- String getDescription()
- int getPetId()
fields:
- @Column(name = "pet_id")
    private int petId;


=== Part 8 ===
Class `com.commerce.backend.model.response.order.OrderResponse` declaration:
public class OrderResponse
The class uses the following imports:
- from package com.commerce.backend.model.dto: OrderDetailDTO, DiscountDTO
The class has following members:
public methods:
- Long getId()
- String getShipName()
- String getShipAddress()
- String getBillingAddress()
- String getCity()
- String getState()
- String getZip()
- String getCountry()
- String getPhone()
- Float getTotalPrice()
- Float getTotalCargoPrice()
- Long getDate()
- Integer getShipped()
- String getCargoFirm()
- String getTrackingNumber()
- DiscountDTO getDiscount()
- List<OrderDetailDTO> getOrderItems()


=== Part 9 ===
package jakarta.persistence;
@java.lang.annotation.Documented
@java.lang.annotation.Target({java.lang.annotation.ElementType.TYPE})
@java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)
public @interface Entity {
}


Remember: Your response MUST be ONLY the list, e.g. [1, 3, 5]
