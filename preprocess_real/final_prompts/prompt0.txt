
Your task is to select EXACTLY the context parts needed to implement the test scenarios for the provided code.

**Rules:**
1. Analyze the code under test and test scenarios carefully
2. Select context parts that contain:
   - Data structures, required for implementing test scenarios
   - Functions / methods of classes, required for implementing test scenarios
   - Any other information, required for implementing test scenarios
3. Exclude:
   - Unrelated components (even if similar)
   - Low-level implementation details
   - Duplicate information
4. Return ONLY Python list of selected part numbers, like [1, 3, 4]

**Code to test:**
package org.springframework.samples.petclinic.customers.web;
@RequestMapping("/owners")
@RestController
@Timed("petclinic.owner")
@Slf4j
class OwnerResource {
    private final OwnerRepository ownerRepository;
    private final OwnerEntityMapper ownerEntityMapper;
        @PostMapping
    @ResponseStatus(HttpStatus.CREATED)
    public Owner createOwner(@Valid @RequestBody OwnerRequest ownerRequest) {
        Owner owner = ownerEntityMapper.map(new Owner(), ownerRequest);
        return ownerRepository.save(owner);
    }
/**
     * Read single Owner
     */
        @GetMapping(value = "/{ownerId}")
    public Optional<Owner> findOwner(@PathVariable("ownerId") @Min(1) int ownerId) {
        return ownerRepository.findById(ownerId);
    }
/**
     * Read List of Owners
     */
        @GetMapping
    public List<Owner> findAll() {
        return ownerRepository.findAll();
    }
        @PutMapping(value = "/{ownerId}")
    @ResponseStatus(HttpStatus.NO_CONTENT)
    public void updateOwner(@PathVariable("ownerId") @Min(1) int ownerId, @Valid @RequestBody OwnerRequest ownerRequest) {
        final Owner ownerModel = ownerRepository.findById(ownerId).orElseThrow(() -> new ResourceNotFoundException("Owner " + ownerId + " not found"));

        ownerEntityMapper.map(ownerModel, ownerRequest);
        log.info("Saving owner {}", ownerModel);
        ownerRepository.save(ownerModel);
    }
public OwnerResource(org.springframework.samples.petclinic.customers.model.OwnerRepository ownerRepository,org.springframework.samples.petclinic.customers.web.mapper.OwnerEntityMapper ownerEntityMapper)
}

**Test scenarios (4 total):**
0) Verify that submitting a valid owner creation request stores the owner and returns a created response
Steps: Given the system is prepared to accept owner registrations with all required valid details (first name, last name, address, city, and a correctly formatted telephone)
When a user submits a request to create a new owner with valid information
Then the system should save the owner in the repository
And the response status should indicate that the owner was successfully created

1) Verify that retrieving an existing owner's details returns the correct owner information
Steps: Given an owner with valid details already exists in the system identified by a generic valid owner id
When a user requests the owner information using that valid owner id
Then the system should return the owner details corresponding to the provided id
And the returned details should include the expected first name, last name, address, city, and telephone information

2) Verify that retrieving all owners returns an empty list when no owners exist in the system
Steps: Given the system has no registered owner records
When a user requests a list of all owners
Then the system should return an empty list indicating that there are no owners to display

3) Verify that updating an existing owner's details successfully persists the changes
Steps: Given an owner with initial valid details exists in the system identified by a valid owner id
And new valid details are available for updating the owner's information
When a user submits an update request with the new owner information for the existing owner id
Then the system should update the owner record with the new details
And the response status should indicate that the update was successful with no content returned
And subsequent retrieval of the owner should reflect the updated details



**Context parts (0-19):**

=== Part 0 ===
package jakarta.persistence;
@java.lang.annotation.Target({java.lang.annotation.ElementType.METHOD, java.lang.annotation.ElementType.FIELD})
@java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)
public @interface Column {
    java.lang.String name() default ""
}

=== Part 1 ===
package io.quarkus.cli;
@CommandLine.Command(name = "create", header = "Create a new project.", subcommands = {
        CreateApp.class,
        CreateCli.class,
        CreateExtension.class })
public class Create implements Callable<Integer> {
}

=== Part 2 ===
package org.springframework.samples.petclinic.customers.model;
/**

 * Can be Cat, Dog, Hamster...
 */
@Entity
@Table(name = "types")
public class PetType {
public java.lang.Integer getId()
public java.lang.String getName()
}

=== Part 3 ===
package org.springframework.samples.petclinic.customers.model;
/**
 * Repository class for <code>Owner</code> domain objects All method names are compliant with Spring Data naming
 * conventions so this interface can easily be extended for Spring Data See here: http://static.springsource.org/spring-data/jpa/docs/current/reference/html/jpa.repositories.html#jpa.query-methods.query-creation

 */
public interface OwnerRepository extends JpaRepository<Owner, Integer> {
}

=== Part 4 ===
package com.commerce.backend.service;
public interface ProductService {
}

=== Part 5 ===
Class `ProductVariant` declaration:
@Entity
@Table(name = "product_variant")
public class ProductVariant
The class uses the following imports:
- from package com.commerce.backend.model.entity: Color, Product
The class has following members:
public methods:
- ProductVariant()
- void setId(Long id)
- void setProduct(Product product)
- void setColor(Color color)
- void setWidth(String width)
- void setHeight(String height)
- void setComposition(String composition)
- void setPrice(Float price)
- void setCargoPrice(Float cargoPrice)
- void setTaxPercent(Float taxPercent)
- void setImage(String image)
- void setThumb(String thumb)
- void setStock(Integer stock)
- void setSellCount(Integer sellCount)
- void setLive(Integer live)


=== Part 6 ===
Class `org.springframework.samples.petclinic.customers.model.Pet` declaration:
@Entity
@Table(name = "pets")
public class Pet
The class uses the following imports:
- from package org.springframework.samples.petclinic.customers.model: Owner, PetType
The class has following members:
public methods:
- Integer getId()
- String getName()
- Date getBirthDate()
- PetType getType()
- Owner getOwner()


=== Part 7 ===
package com.commerce.backend.model.entity;
@Entity
@Table(name = "product")
public class Product {
    @ManyToOne
    @JoinColumn(name = "category_id")
    private ProductCategory productCategory;
    @Column(name = "name")
    private String name;
    @Column(name = "url")
    private String url;
}

=== Part 8 ===
package com.commerce.backend.validator;
@Target({TYPE, FIELD, ANNOTATION_TYPE})
@Retention(RUNTIME)
@Constraint(validatedBy = CustomEmailValidator.class)
@Documented
public @interface CustomEmail {
}

=== Part 9 ===
package javax.persistence;
public enum CascadeType {
    ALL
}

=== Part 10 ===
Class `com.commerce.backend.model.entity.ProductCategory` declaration:
@Entity
@Table(name = "product_category")
public class ProductCategory
The class has following members:
public methods:
- ProductCategory()
- void setId(Long id)
- void setName(String name)
- Long getId()
- String getName()


=== Part 11 ===
package javax.persistence;
public enum GenerationType {
 IDENTITY
}

=== Part 12 ===
package org.springframework.security.crypto.password;
public interface PasswordEncoder {
}

=== Part 13 ===
Class `org.springframework.samples.petclinic.customers.model.Owner` declaration:
@Entity
@Table(name = "owners")
public class Owner
The class has following members:
public methods:
- protected Set<Pet> getPetsInternal()
- List<Pet> getPets()
- Integer getId()
- String getFirstName()
- String getLastName()
- String getAddress()
- String getCity()
- String getTelephone()
fields:
- @Getter
    @Setter
    @Column(name = "address")
    @NotBlank
    private String address;
- @Getter
    @Setter
    @Column(name = "city")
    @NotBlank
    private String city;
- @Getter
    @Setter
    @Column(name = "telephone")
    @NotBlank
    @Digits(fraction = 0, integer = 12)
    private String telephone;
- @Getter
    @Setter
    @Column(name = "first_name")
    @NotBlank
    private String firstName;
- @Getter
    @Setter
    @Column(name = "last_name")
    @NotBlank
    private String lastName;


=== Part 14 ===
package jakarta.persistence;
@java.lang.annotation.Target({java.lang.annotation.ElementType.TYPE})
@java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)
public @interface Table {
    java.lang.String name() default ""
}

=== Part 15 ===
package com.commerce.backend.service;
@Service
public class ProductServiceImpl implements ProductService {
    @Autowired
    public ProductServiceImpl(ProductCacheService productCacheService,
                              ProductRepository productRepository,
                              ProductVariantRepository productVariantRepository,
                              ProductVariantCacheService productVariantCacheService,
                              ProductResponseConverter productResponseConverter,
                              ProductVariantResponseConverter productVariantResponseConverter,
                              ProductDetailsResponseConverter productDetailsResponseConverter)
}

=== Part 16 ===
package jakarta.persistence;
@java.lang.annotation.Documented
@java.lang.annotation.Target({java.lang.annotation.ElementType.TYPE})
@java.lang.annotation.Retention(java.lang.annotation.RetentionPolicy.RUNTIME)
public @interface Entity {
}

=== Part 17 ===
package org.springframework.samples.petclinic.customers.web;
@ResponseStatus(value = HttpStatus.NOT_FOUND)
public class ResourceNotFoundException extends RuntimeException {
    public ResourceNotFoundException(String message) { super(message); }
}

=== Part 18 ===
package org.springframework.samples.petclinic.customers.web.mapper;
@Component
public class OwnerEntityMapper implements Mapper<OwnerRequest, Owner> {
    // This is done by hand for simplicity purpose. In a real life use-case we should consider using MapStruct.
    @Override
    public Owner map(final Owner owner, final OwnerRequest request) {
        owner.setAddress(request.address());
        owner.setCity(request.city());
        owner.setTelephone(request.telephone());
        owner.setFirstName(request.firstName());
        owner.setLastName(request.lastName());
        return owner;
    }
}

=== Part 19 ===
package org.springframework.samples.petclinic.customers.web;
public record OwnerRequest(@NotBlank String firstName,
                           @NotBlank String lastName,
                           @NotBlank String address,
                           @NotBlank String city,
                           @NotBlank
                           @Digits(fraction = 0, integer = 12)
                           String telephone
) {
}


Remember: Your response MUST be ONLY the list, e.g. [1, 3, 5]
